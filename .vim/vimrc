set nocompatible

let g:dotvim = fnamemodify($MYVIMRC, ':h')
let g:mapleader="\<Space>"

call plug#begin(g:dotvim.'/bundle')
let g:plug_window = 'tabnew'

let g:plug_url_format = 'https://github.com/%s.git'
Plug 'vheon/vim-colors-solarized'
Plug 'vheon/vim-cursormode'
unlet! g:plug_url_format

Plug 'fmoralesc/vim-help-grimoire'
Plug 'whatyouhide/vim-gotham'
Plug 'chriskempson/base16-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-repeat'

Plug 'tpope/vim-vinegar'
let g:netrw_altfile = 1

Plug 'cohama/lexima.vim', { 'on': [] }
augroup load_lexima
  autocmd!
  autocmd! InsertEnter * call plug#load('lexima.vim') | autocmd! load_lexima
augroup END

Plug 'Valloric/ListToggle'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-rsi'

" TextObj-User
Plug 'kana/vim-textobj-user'
Plug 'thinca/vim-textobj-function-javascript'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-help'

Plug 'machakann/vim-textobj-delimited'
Plug 'PeterRincker/vim-argumentative'

Plug 'bronson/vim-visual-star-search'
Plug 'tommcdo/vim-lion'
Plug 'tommcdo/vim-exchange'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/inline_edit.vim'
Plug 'AndrewRadev/linediff.vim'

Plug 'Valloric/YouCompleteMe', { 'do': function('startup#YCMInstall') }
let g:ycm_confirm_extra_conf    = 0
let g:ycm_complete_in_comments  = 1
let g:ycm_global_ycm_extra_conf = g:dotvim.'/ycm.py'
let g:ycm_extra_conf_vim_data   = ['&filetype']
let g:ycm_seed_identifiers_with_syntax = 1

Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsEditSplit="vertical"

Plug 'Valloric/MatchTagAlways'
" XXX: I should use something a little more generic. See gary bernhardt setup
" Plug 'thoughtbot/vim-rspec'
" let g:rspec_command = "!rspec --color {spec}"

Plug 'airblade/vim-gitgutter'
let g:gitgutter_sign_column_always = 1

Plug 'tpope/vim-scriptease'
Plug 'fatih/vim-go', { 'do': function('startup#GoBinsInstall')}
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_fmt_fail_silently = 1

" XXX: add visualmode version
nmap mw <Plug>(SimpleMark)
nnoremap <C-l> :nohlsearch<Cr>:MarkClearAll<cr><C-L>

Plug 'tmux-plugins/vim-tmux'

Plug 'junegunn/goyo.vim'
autocmd! User GoyoEnter
autocmd! User GoyoLeave
autocmd User GoyoEnter call cursormode#LocalActivate()

Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc#syntax#style#emphases = 0

call plug#end()

runtime! macros/matchit.vim
runtime plugin/sensible.vim

" In the standart runtime there's a filetype.vim that can handle file.m either
" as matlab file or as objc file if the file is not empty. On empty file it
" fallback to g:filetype_m if specified or 'matlab'
let g:filetype_m = 'objc'

" Set them in this order to avoid sourcing color/solarized.vim more than one
set t_Co=16
set background=dark
silent! colorscheme solarized

set synmaxcol=512

hi! MarkWord1 ctermbg=6 ctermfg=Black
hi! MarkWord2 ctermbg=4 ctermfg=Black
hi! MarkWord3 ctermbg=2 ctermfg=Black
hi! MarkWord4 ctermbg=5 ctermfg=Black
hi! MarkWord5 ctermbg=3 ctermfg=Black
hi! MarkWord6 ctermbg=9 ctermfg=Black

set encoding=utf-8
set spelllang=en,it

set showmatch
set completeopt-=preview
set completeopt+=menuone
set pumheight=30

set cindent
set cinoptions=L0,g0,N-s,t0,(0
set shiftround

set timeoutlen=500
set updatetime=750

set lazyredraw
set smartcase
set ignorecase

if executable('ag')
  set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
  set grepformat=%f:%l:%c:%m
endif

let &statusline  = ''
let &statusline .= '%h%w '
let &statusline .= '%<%f '
let &statusline .= '%{fugitive#statusline()}'
let &statusline .= '%-4(%m%r%)'
let &statusline .= '%='
let &statusline .= '%y '
let &statusline .= '%-14(%P %3l:%02c%)'
let &statusline .= '[%{strlen(&l:fenc) ? &enc : &l:fenc}]'
set cmdheight=2
set noshowmode
set wildmode=list:longest
set wildignore+=.hg,.git,.svn
set wildignore+=*.o,*.obj,*~
set wildignore+=*.DS_Store
set wildignore+=*.png,*.jpg,*.jpeg,*.gif
set wildignore+=*.mkv,*.avi
set wildignore+=*.pyc
set wildignore+=*.class

set nomore

set noautochdir
set hidden
set cursorline
set colorcolumn=81

set viminfo=!,'10,<50,s20,h
set undolevels=128

set nostartofline

set noerrorbells
set novisualbell
set t_vb=

" Prevent Vim from clobbering the scroll back buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

set noswapfile
set nobackup
set nowritebackup

set formatoptions-=oa

set nofoldenable
set foldlevelstart=99
set foldminlines=5
set foldmethod=manual

set list
let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u26ad"
let &showbreak = "\u21aa "

if has('mouse')
  set mouse=a
endif

" Sudo write
command! W exec 'w !sudo tee % > /dev/null' | e!
command! -nargs=0           FollowSymlink   call functions#FollowSymlink()
command! -nargs=*           SetIndent       call functions#SetIndent(<f-args>)
command! -nargs=+           Expandtab       call functions#Expandtab(<f-args>)
command! -nargs=0           Rename          call functions#Rename()
command!                    Remove          call functions#Remove()
command! -bar     -nargs=*  Scratch         call functions#ScratchEdit(<q-args>)
command! -range=% -nargs=0  StripWhitespace call functions#StripWhitespace(<line1>,<line2>)

" this is for stop profiling after starting vim with
" vi --cmd 'profile start vimrc.profile' --cmd 'profile func *' --cmd 'profile file *'
" I have a script in ~/bin which start vim like this
command! -nargs=0 StopProfiling call profile#stop()
" If I want to profile something after that vim started
command! -nargs=0 StartProfiling call profile#start()

" more consistent with other operator
nnoremap Y y$

" possible mnemonic? let say is for YELL
inoremap <C-y> <esc>gUiw`]a

" Practical Vim tip #34
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

" copy the first range address and add + or -
function! s:command_replicate_address(lhs, direction)
  let match = matchstr(getcmdline(), '^.\{-1,}\ze,$')
  return match == '' ? a:lhs : match.a:direction
endfunction
cnoremap > <C-R>=<SID>command_replicate_address(">", "+")<Cr>
cnoremap < <C-R>=<SID>command_replicate_address("<", "-")<Cr>
cnoremap <C-X>> >
cnoremap <C-X>< <

nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>ez :e ~/.zshrc<CR>
nnoremap <silent> <leader>et
      \ :call picker#command("files -a -A ~/.cache/vtests", "", ":e")<cr>

" http://vimcasts.org/episodes/the-edit-command
" https://twitter.com/garybernhardt/status/40292706609532928
cnoremap %% <C-R>=expand('%:h').'/'<CR>
nmap <leader>e. :edit %%
nmap <leader>v. :view %%

nnoremap <C-n> :set invnumber<cr>

" Make selecting inside an HTML tag better
xnoremap <silent> it itVkoj
xnoremap <silent> at atV

" CTRL-U and CTRL-W in insert mode cannot be undone.  Use CTRL-G u to first
" break undo, so that we can undo those changes after inserting a line break.
" For more info, see: http://vim.wikia.com/wiki/Recover_from_accidental_Ctrl-U
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" XXX: change the api for this. Inside we use git ls-files and fallback to
" what we pass, in this case `files -A`. Is it optimal?
nnoremap <silent> g/
      \ :call picker#command("files -A", "", ":e")<cr>

" https://github.com/rhysd/dotfiles/blob/af0e953113175f6e5ee1ed3f8b368dd76eb05ad0/vimrc#L16-L19
" but highlight Autocmd command properly
augroup VimrcAutocmds
  autocmd!
augroup END
command! -nargs=* Autocmd autocmd VimrcAutocmds <args>
Autocmd FileType vim syn keyword vimAutoCmd Autocmd skipwhite nextgroup=vimAutoEventList

Autocmd BufEnter,WinEnter,InsertLeave * set cursorline
Autocmd BufLeave,WinLeave,InsertEnter * set nocursorline

Autocmd BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 1 && line("'\"") <= line("$")
                   \|   execute 'normal! g`"'
                   \| endif

Autocmd FileType * setlocal formatoptions-=o

Autocmd BufReadPost vim.profile setl ft=vim nolist

" local cd to git root using fugitive or if not available at last set cwd
Autocmd BufLeave * let b:last_cwd = getcwd()
Autocmd BufEnter * if exists('b:last_cwd')
                \|   execute 'lcd' b:last_cwd
                \| else
                \|   try
                \|     execute 'lcd' '`=fugitive#repo().tree()`'
                \|   catch
                \|   endtry
                \| endif

" When switching colorscheme in terminal vim change the profile in iTerm as well.
if !has('gui_running')
  function! s:change_iterm2_profile()
    let dual_colorschemes = ["solarized"]
    if exists('g:colors_name')
      let profile = g:colors_name
      if index(dual_colorschemes, g:colors_name) >= 0
        let profile .= '_'.&background
      endif
      let escape = '\033]50;SetProfile='.profile.'%s\x7'
      if exists('$TMUX')
        let escape = '\033Ptmux;'.substitute(escape, '\\033', '\\033\\033', 'g').'\033\\'
      endif
      silent call system("printf '".escape."' > /dev/tty")
    endif
  endfunction

  Autocmd VimEnter,ColorScheme * call s:change_iterm2_profile()
endif

" Just so I don't lose them xD  ᕕ( ᐛ )ᕗ  ¯\_(ツ)_/¯
